#!/usr/bin/env python
import RPi.GPIO as GPIO
import time
import json
import nnpy
import select

# LEDs.
PIN_LED_STATUS = 19
PIN_LED_LINK = 13
PIN_LED_MOTORS = 12
# 3.3V power rail for laser.
PIN_SW_LASER_POWER = 22
# 9V output for SFP, initialize HIGH.
PIN_SW_SFP_OUTPUT = 27
# 24V unregulated channel (for heaters and stuff).
PIN_SW_UNREGULATED = 17
# Drain output for 3.3V channel (for laser or similar).
PIN_SW_DRAIN = 4
# Input for reed switch.
PIN_IN_SWITCH = 16

# Enable pins.
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(PIN_LED_STATUS, GPIO.OUT)
GPIO.setup(PIN_LED_LINK, GPIO.OUT)
GPIO.setup(PIN_LED_MOTORS, GPIO.OUT)
GPIO.setup(PIN_SW_LASER_POWER, GPIO.OUT)
GPIO.setup(PIN_SW_SFP_OUTPUT, GPIO.OUT)
GPIO.setup(PIN_SW_UNREGULATED, GPIO.OUT)
GPIO.setup(PIN_SW_DRAIN, GPIO.OUT)
GPIO.setup(PIN_IN_SWITCH, GPIO.IN)
# Set up initial values.
GPIO.output(PIN_LED_STATUS, GPIO.HIGH)
GPIO.output(PIN_LED_LINK, GPIO.HIGH)
GPIO.output(PIN_LED_MOTORS, GPIO.HIGH)
GPIO.output(PIN_SW_LASER_POWER, GPIO.HIGH)
GPIO.output(PIN_SW_SFP_OUTPUT, GPIO.HIGH)
GPIO.output(PIN_SW_UNREGULATED, GPIO.LOW)
GPIO.output(PIN_SW_DRAIN, GPIO.LOW)

# Establish IPC connection.
ipc = nnpy.Socket(nnpy.AF_SP, nnpy.SUB)
ipc.connect('ipc:///tmp/koruza-publish.ipc')
ipc.setsockopt(nnpy.SUB, nnpy.SUB_SUBSCRIBE, '')

poll = select.poll()
poll.register(ipc.getsockopt(nnpy.SOL_SOCKET, nnpy.RCVFD), select.POLLIN)

# Initialize last known state.
status_x = 0
status_y = 0
status_f = 0
rx_power = 0
led_status = GPIO.HIGH

last_led_toggle = time.time()
last_watchdog = time.time()

last_sfp_watchdog = time.time()
last_sfp_update = None
last_motors_update = None

while True:
    now = time.time()

    # Check for incoming updates.
    fds = poll.poll(100)
    if fds:
        topic, payload = ipc.recv().split('@', 1)
        data = json.loads(payload)
        if data['type'] == 'motors':
            status_x = data['motor']['status_x']
            status_y = data['motor']['status_y']
            status_f = data['motor']['status_f']
            last_motors_update = now
        elif data['type'] == 'sfp':
            # TODO: Properly support multiple SFP modules.
            rx_power = data['sfp'].values()[0]['rx_power_mw']
            last_sfp_update = now
        elif data['type'] == 'watchdog':
            last_watchdog = now

    # Cycle power in case there has been no SFP/motor updates.
    def is_timeout(last_update, timeout=10):
        try:
            if now - last_update > timeout:
                return True
        except TypeError:
            pass

        return False

    if (is_timeout(last_sfp_update) or is_timeout(last_motors_update)) and is_timeout(last_sfp_watchdog, 60):
        print "WARNING: SFP/motor watchdog triggered, cycling PIN_SW_SFP_OUTPUT."
        GPIO.output(PIN_SW_SFP_OUTPUT, GPIO.LOW)
        time.sleep(1)
        GPIO.output(PIN_SW_SFP_OUTPUT, GPIO.HIGH)
        last_sfp_watchdog = now

    # Update GPIOs.
    if status_x == 1 or status_y == 1 or status_f == 1:
        GPIO.output(PIN_LED_MOTORS, GPIO.HIGH)
    else:
        GPIO.output(PIN_LED_MOTORS, GPIO.LOW)

    if rx_power > 0.0010:
        GPIO.output(PIN_LED_LINK, GPIO.HIGH)
    else:
        GPIO.output(PIN_LED_LINK, GPIO.LOW)

    # Toggle status LED.
    if now - last_watchdog > 70:
        led_status = GPIO.HIGH
        GPIO.output(PIN_LED_STATUS, GPIO.HIGH)
    elif now - last_led_toggle > 0.5:
        led_status = GPIO.HIGH if led_status == GPIO.LOW else GPIO.LOW
        GPIO.output(PIN_LED_STATUS, led_status)
        last_led_toggle = now
