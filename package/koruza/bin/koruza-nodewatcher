#!/usr/bin/env python
import json
import os
import requests
import sys
import time
import uuid
import OpenSSL
import nnpy
import select


def average(points):
    return float(sum(points)) / len(points)

# Namespace for KORUZA device UUIDs.
KORUZA_UUID_NAMESPACE = uuid.UUID('d52e15af-f8ca-4b1b-b982-c70bb3d1ec4e')
# Nodewatcher push interval (in seconds).
NODEWATCHER_PUSH_INTERVAL = 300
# Nodewatcher push URL.
NODEWATCHER_PUSH_URL = 'https://push.nodewatcher.koruza.net/push/http/%(uuid)s'
# Private key and certificate location.
NODEWATCHER_CERTIFICATE = '/koruza/config/nodewatcher-authentication.crt'
NODEWATCHER_PRIVATE_KEY = '/koruza/config/nodewatcher-authentication.key'
# Sensor data that should be reported.
REPORT_SENSOR_DATA = {
    'motors': {
        'accel': {'name': "Motor Acceleration", 'unit': "", 'aggregation': average},
        'command': {'name': "Motor Command", 'unit': "", 'aggregation': average},
        'current_f': {'name': "Motor Current F", 'unit': "", 'aggregation': average},
        'current_x': {'name': "Motor Current X", 'unit': "", 'aggregation': average},
        'current_y': {'name': "Motor Current Y", 'unit': "", 'aggregation': average},
        'empty': {'name': "Motor Empty", 'unit': "", 'aggregation': average},
        'flash_status': {'name': "Motor Flash Status", 'unit': "", 'aggregation': average},
        'flash_write_count': {'name': "Motor Flash Write Count", 'unit': "", 'aggregation': average},
        'laser': {'name': "Motor Laser", 'unit': "", 'aggregation': average},
        'next_f': {'name': "Motor Next F", 'unit': "", 'aggregation': average},
        'next_x': {'name': "Motor Next X", 'unit': "", 'aggregation': average},
        'next_y': {'name': "Motor Next Y", 'unit': "", 'aggregation': average},
        'speed': {'name': "Motor Speed", 'unit': "", 'aggregation': average},
        'status_f': {'name': "Motor Status F", 'unit': "", 'aggregation': average},
        'status_x': {'name': "Motor Status X", 'unit': "", 'aggregation': average},
        'status_y': {'name': "Motor Status Y", 'unit': "", 'aggregation': average},
    },
    'sfp': {
        'rx_power_mw': {'name': "SFP (%(serial)s) RX Power", 'unit': "mW", 'aggregation': average},
        'temperature_c': {'name': "SFP (%(serial)s) Temperature", 'unit': "C", 'aggregation': average},
        'tx_bias_ma': {'name': "SFP (%(serial)s) TX Bias", 'unit': "mA", 'aggregation': average},
        'tx_power_mw': {'name': "SFP (%(serial)s) TX Power", 'unit': "mW", 'aggregation': average},
        'vcc_v': {'name': "SFP (%(serial)s) VCC", 'unit': "V", 'aggregation': average},
    }
}
# Snapshot interval (in seconds) and number of snapshots to keep for aggregation.
SNAPSHOT_INTERVAL = 1
SNAPSHOT_COUNT = int(NODEWATCHER_PUSH_INTERVAL / SNAPSHOT_INTERVAL)

# Establish IPC connection.
ipc = nnpy.Socket(nnpy.AF_SP, nnpy.SUB)
ipc.connect('ipc:///tmp/koruza-publish.ipc')
ipc.setsockopt(nnpy.SUB, nnpy.SUB_SUBSCRIBE, '')

poll = select.poll()
poll.register(ipc.getsockopt(nnpy.SOL_SOCKET, nnpy.RCVFD), select.POLLIN)

# Generate node UUID from this node's MAC address.
node_uuid = uuid.uuid5(KORUZA_UUID_NAMESPACE, hex(uuid.getnode()).upper()[2:-1])
print "INIT: Initialized on node with UUID '%s'." % str(node_uuid)

# Generate private key and certifikate if needed.
if not os.path.exists(NODEWATCHER_CERTIFICATE) or not os.path.exists(NODEWATCHER_PRIVATE_KEY):
    print "INIT: Generating nodewatcher authentication certificate..."

    # Generate private key.
    private_key = OpenSSL.crypto.PKey()
    private_key.generate_key(OpenSSL.crypto.TYPE_RSA, 2048)

    # Generate self-signed certificate.
    certificate = OpenSSL.crypto.X509()
    certificate.get_subject().C = "SI"
    certificate.get_subject().ST = "Slovenia"
    certificate.get_subject().L = "Slovenia"
    certificate.get_subject().O = "IRNAS"
    certificate.get_subject().OU = "KORUZA"
    certificate.get_subject().CN = str(node_uuid)
    certificate.set_serial_number(1)
    certificate.gmtime_adj_notBefore(0)
    certificate.gmtime_adj_notAfter(10*365*24*60*60)
    certificate.set_issuer(certificate.get_subject())
    certificate.set_pubkey(private_key)
    certificate.sign(private_key, 'sha256')

    # Store certificate file.
    try:
        with open(NODEWATCHER_CERTIFICATE, 'wt') as certificate_file:
            certificate_file.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, certificate))

        with open(NODEWATCHER_PRIVATE_KEY, 'wt') as key_file:
            key_file.write(OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, private_key))
    except IOError:
        print "ERROR: Failed to write certificate to '%s'!" % NODEWATCHER_CERTIFICATE
        sys.exit(1)

    print "INIT: Nodewatcher authentication certificate ready."
else:
    print "INIT: Nodewatcher authentication certificate ready."

current_state = {}
last_state_update = {}
last_push = 0

while True:
    now = time.time()

    # Check for incoming updates.
    fds = poll.poll(10)
    if fds:
        topic, payload = ipc.recv().split('\x00')
        data = json.loads(payload)

        last_update = last_state_update.get(data['type'], 0)
        if now - last_update > SNAPSHOT_INTERVAL and data['type'] in REPORT_SENSOR_DATA:
            # Update current state.
            last_state_update[data['type']] = now
            state = current_state.setdefault(data['type'], {})

            if data['type'] == 'motors':
                for key in REPORT_SENSOR_DATA[data['type']]:
                    if key not in data['motor']:
                        continue

                    points = state.setdefault(key, [])
                    points.append(data['motor'][key])
                    if len(points) > SNAPSHOT_COUNT:
                        points.pop(0)
            elif data['type'] == 'sfp':
                for serial, sfp in data['sfp'].items():
                    sfp_state = state.setdefault(serial, {})

                    for key in REPORT_SENSOR_DATA[data['type']]:
                        if key not in sfp:
                            continue

                        points = sfp_state.setdefault(key, [])
                        points.append(sfp[key])
                        if len(points) > SNAPSHOT_COUNT:
                            points.pop(0)

    # Push data to nodewatcher.
    if now - last_push > NODEWATCHER_PUSH_INTERVAL:
        last_push = now

        # Generate nodewatcher JSON.
        feed = {
            'sensors.generic': {
                '_meta': {
                    'version': 1,
                }
            }
        }

        # Motors.
        for key, points in current_state.get('motors', {}).items():
            descriptor = REPORT_SENSOR_DATA['motors'][key]
            feed['sensors.generic']['motors-%s' % key] = {
                'name': descriptor['name'],
                'unit': descriptor['unit'],
                'value': float(descriptor['aggregation'](points)),
            }

        # SFP modules.
        for serial, sfp in current_state.get('sfp', {}).items():
            for key, points in sfp.items():
                descriptor = REPORT_SENSOR_DATA['sfp'][key]
                feed['sensors.generic']['sfp-%s-%s' % (serial, key)] = {
                    'name': descriptor['name'] % {'serial': serial},
                    'unit': descriptor['unit'],
                    'value': float(descriptor['aggregation'](points)),
                }

        # Post update to nodewatcher.
        try:
            request = requests.post(
                NODEWATCHER_PUSH_URL % {'uuid': str(node_uuid)},
                data=json.dumps(feed),
                cert=(NODEWATCHER_CERTIFICATE, NODEWATCHER_PRIVATE_KEY),
            )

            # Check for successful post.
            if request.json()['status'] != 'ok':
                print "WARNING: Received failure while pushing to nodewatcher."
            else:
                print "OK: Data pushed to nodewatcher."
        except (requests.HTTPError, requests.ConnectionError, ValueError):
            print "WARNING: Failed to push data to nodewatcher."
